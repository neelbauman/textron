Javascriptのランタイムについて
==================================================
JavaScriptのランタイムの特徴は、 **コールスタック** と **タスクキュー** からなる非同期処理環境である。以下に、非同期関数として実装されている関数の、コールされたときの振る舞いを記述する。

1. 非同期関数として実装されている関数は、コールされたとき、まずは通常の関数と同じくコールスタックに積まれ、その中に記述された処理を実行していく。
2. 非同期関数として実装される関数の中の処理には、多くの場合WebAPIとの通信やI/O処理が含まれているのだが、それらをAPI処理として、外部に別プロセスを生成して実行させる仕組みが在る（awaitか？）。 **また** 、API処理をコールすると同時にコールバック関数ヒープに待機させ、そしてまたAPI処理が終了すると同時に、API処理の戻り値を踏まえて、待機させていたコールバック関数をタスクキューに追加する。
3. APIのコールさえしてしまえばあとは自分に記述されている処理にスレッドを占有させて処理を進めることができる。こうなればあとはその非同期関数の仕事は、自分に記述されている処理を実行するだけである。そして処理が終了し次第、コールスタックから抜ける。んでタスクキューに追加されたコールバックは、コールスタックが空いたと見るやいなや割り込んで処理を実行する。

つまるところJavaScriptの非同期処理とは、フラグを付けた処理（それは往々にしてプログラマが、時間がかかる処理だと判断した処理であるが）をAPI化しJavaScriptランタイムの外部で実行させることでランタイムのスレッドが走る場所であるところのコールスタックを長く占有させないようにしながら、そのAPI処理の結果に依存する処理を待機のちタスクキューに登録しておいてコールスタックが空いたときに割り込ませることで、処理の互いの依存性を破壊しないようにするというものである。
