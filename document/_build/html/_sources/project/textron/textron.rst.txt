Textronとは
=====================

2021年現在、**JupyterNotebook** や **GoogleColaboratory** といったオンラインのインタラクティブなノートブックが提供され、普及している。それらはもう数え切れないくらいの多くのメリットをもつ。Google先生を始めとする諸先生方にはほんとに頭があがらない。

- 環境構築が不要
- コードとドキュメントをきれいに統合できる
- オプションによっては、時間のかかる計算をリモートのハイスペックな環境で実行したりできる

これらはプログラミングの入門に最適な解となりつつあるし、実際のところ、これからの時代は開発環境なんかも全てオンラインで提供することになるのだろう。オンラインエディタならすっと書いてさっと実行してすぐに結果が見れるし、必要なエンジンやライブラリなんかも全てインストール済みだし。

**しかし** 、そんなよく知らん未来のことは置いといて、重要なのは今なのであって、現在に生きる一個体の話として、それらのすべてを合わせたとしても、次のデメリットたちには敵わない。

- **好きなエディタを使えない**
- **十分な速度を持つオンライン環境でないと使えない**
- **無料でも十分な機能だが、突き詰めようとすると金がかかる**
- **ブラウザで開くので、スムーズな資料閲覧の邪魔になる**
- **バージョンや静的ファイルやディレクトリ構造などといった、リソースのスムーズな管理が難しい**

いずれも、非常に重大な問題である。おれは **Vimのキーバインディングをもったエディタ** でないと使えないし、Atomの、**使うことに喜びを覚える感じ** が大好きだ。それに、いまの俺の通信環境っていうのはお世辞にも十分とは言えない。通信速度制限をぶちかまされることだって多々ある。そんなときにコードやグラフがインタラクティブに統合された美しいドキュメント環境を利用できないなんてことになったら、もう死んでしまうかもしれない。金はできるだけ払いたくない。あとは、ドキュメントの管理なんかをコマンドラインからしっかりスムーズにやりたい人なんかも、そうかもしれない。

ようするに、 **PDFなんかでは実現できないようなインタラクティブ性をもつ美しいドキュメントを作りながら、その裏のリソース編集や管理は自分のローカル環境でやりたい** ってこと。そういう人は一定数いるんじゃないか。そう思うんです。

だから、Textronを開発します。せっかくオンラインで提供されているものをローカルに移植してくるなんて、時代を逆行する愚行だって？そんなのは分かってんだよだまってろよ。おれは、自分の好きなエディタをつかって、自分のやりやすいリソース管理をやって、そんでネットにつながっていようがつながってなかろうが美しいドキュメントを見たいんだよ。つーわけで以下、Textronの構成概要。

Textron技術構成
--------------------------------------------

GUIフレームワーク　Electron
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
**Electron** とは、ウェブリソースをデスクトップ環境のGUIアプリケーションとしてほとんどそのまんまローカルに移植してくることができる、GUIアプリケーション開発のためのフレームワークである。これはまじでつよくて、使いやすくて美しいGUIを、 **慣れ親しんだ言語（HTML、CSS、JavaScript）をもちいて制作できる。** これでWindowsのクソダサネイティブGUIを見なくて済むようになり、「触れることに喜びを感じるUI/UX」を作りやすくなる。をついつい、

    .. raw:: html

        なんでreactが読み込まれないんだよ
        <div id="like_button_container"></div>

なんて愚痴をもらすのも、このElectron×（Sphinx＋React＋Jsライブラリ群）という構成にすごく可能性を感じているからで、愛ゆえのムチだとおもって理解してほしい。


ドキュメンテーションツール Sphinx
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| Sphinxとは、PythonによるPythonのためのドキュメント制作ツールである。
| 　**ページ間のリファレンスや外部参照リンクといった複雑な構造をもちながらも拡張性と柔軟性を併せ持ち、さらにはグラフィカルにも美しいドキュメント** を **手軽に制作できる** ツールとして大きな可能性を持つと睨んでいる。なにより、最終出力としてhtmlを生成できるのがありがたい。
| 　もともとPythonのライブラリやフレームワークといったものたちのドキュメント制作向けにPythonで作られたツールで、たとえばPythonクラスの説明文とか関数の仕様とかを抜き出してきてドキュメントに整形してくれるような機能がある。Sphinxをフルに活用するというのはそういうことだ。reSTをベースにしているといっても、Pythonのドキュメント制作のための機能拡張が凄まじい。 **そんなSphinxをPythonドキュメント以外に利用してしまうのはいかがなものか？** うーん、いいんじゃね？生のreSTをどうやってコンパイルするかわからんし、なによりバックエンドでJinjaを動かしてテンプレートを拡張しやすいし、ディレクティブも充実しているし。テーマなんてものもあるし。
| 　Electronを使うということはそのコンテンツは（最終的には）HTMLになるということだ。だから例えばこのTextronのようなドキュメントアプリケーションの場合には、整った形のHTML＋その他static fileを手軽に生成できるSphinxが丁度いいのでは？


UIフレームワーク　React
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
React。それは現代における、JavaScript３大フレームワークの一角をなす超人気ライブラリだ。僕は、その技術思想にひどく共感した。哲学的にいい。それはつまり健康にいいということだ。
僕は馬鹿だから、HTMLに直接 :code:`<script/>` タグでコードを書き込むのがほんとに苦痛なんだ。だからJsファイルを別に記述しておいてそれをHTMLでロードするのがほんとにベストプラクティスだと信じているわけだけれども。Reactはそれを許してくれる。しかも、HTMLに対する記述は最小限でいいんだ。レイアウトとしての枠を予め設定しておけば、その中身はReactのJSXで生成できる。

.. code-block:: js

    // document/_static/tech/project/ui.jsの中身
    // これをdocument/tech/project/textron.rstでrawディレクティブにより読み込む
    'use strict';
    // Reactエレメントを生成
    const e = React.createElement;

    // Reactステート付きコンポーネントクラスを作成
    class LikeButton extends React.Component {
        constructor(props) {
            super(props);
            this.state = {liked: false};
        }

        render() {
            if (this.state.liked) {
                return 'You liked this.';
            }
            // エレメントを、JSXではなく直接記述（onClickを追加するため）
            return e(
                'button',
                { onClick: () => this.setState({ liked: true }) },
                'Like'
            );
        }
    }

    // idがlike_button_containerのエレメントを持ってきて、それに、コンポーネントLikeButtonから生成したReactエレメントをレンダリングて返す
    const domContainer = document.querySelector('#like_button_container');
    ReactDom.render(e(LikeButton), domContainer);

なにより、ボトムアップ的にも組み込みやすいし、トップダウン的にも設計構築しやすいなんて素晴らしい柔軟性じゃないか。JSXっていう記法もすぐに気に入ったし。コンポーネントさえ作っとけば使うバックエンドによってレンダープロセスでもメインプロセスでもレンダリングできるっていうのも柔軟性だ。なんだ柔軟性しかないじゃないか。

ReactのコンパイラはBabelとする。次のコマンドを走らせておくことで、 :code:`document/static` にあるReactを始めとするJs拡張言語たちを、クロスブラウザの形にコンパイルして :code:`document/_static` に出力してくれる。ここでSphinxのStaticfile回収機能によって :code:`document/_build/html/_static` 以下に再配置してHTMLから読み込めるようにする。ただなあ、静的ファイルだけを編集したときに :code:`make` コマンドが更新を感知してくれないのが問題というかめんどうなのよね。もちろん、 :code:`.rst` ファイルを編集して :code:`make html` すれば静的ファイルを更新してくれるんだけどね。あくまでreSTのコンパイラですってか（笑。

.. code-block:: bash

    $npx babel --watch document/_static_src --out-dir document/_static --presets react-app/prod


Jsライブラリ群
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| Electronの技術思想はChromiumのものをそのまま継承している。ウィンドウごとに生成されるレンダープロセスのリソースやライフサイクルを、アプリケーションのメインプロセスで管理するというものだ。したがって、 **グラフィカルな処理やユーザーアクションとの直接のやり取りは全てレンダープロセスが担当する** ということになる。したがってまた、種々のJavaScriptライブラリというのもレンダープロセス内で利用可能である（注意は、レンダープロセス内のChromium環境でしかできないということではないということ。node環境で実行することもできる。）だから、グラフをさわって動かしたりするようなインタラクティブ性を保ちながら、 :math:`\LaTeX` で組版したPDFファイルのような美しいドキュメントを生成することができる。しかもリンク付き。
| さて、Shinxのいいところだけど、ネイティブで *MathJax* を取り込むためのコンフィギュレーションがあるということも追加しておこう。そしてその他のカスタムstatic files を取り込むのも、その取り込み方にも柔軟性がある。

Textronの機能
----------------------------------------
以上が、Textronを構成する技術概要であった。ところでTextronの本領は、インタラクティブで機能を組み込みやすい美しいノートブックであるというところにある。したがって、ここからはTextronに埋め込む予定の機能を記述していく。

インタラクティブなグラフプロット
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
csvファイルやdatファイル、あるいはCIFファイルなんかも、Textronにほいって渡すことでプロットしてくれて、しかもグリグリ動かすことができたりしたら最高だ。



.. raw:: html

    <script src="../_static/project/ui.js"></script>
